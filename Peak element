

class Solution {
  public:
    int peakElement(vector<int> &arr) {
        // Your code here
          int n = arr.size();
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = (low + high) / 2;

            // Check if mid is a peak element
            if ((mid == 0 || arr[mid - 1] < arr[mid]) && (mid == n - 1 || arr[mid + 1] < arr[mid])) {
                return mid; // Return the index of the peak element
            }

            // If the left neighbor is greater, then the peak must be on the left side
            if (mid > 0 && arr[mid - 1] > arr[mid]) {
                high = mid - 1;
            } else { // If the right neighbor is greater, then the peak must be on the right side
                low = mid + 1;
            }
        }
        return -1; // This line should never be reached if the input is valid
    }

    bool isValidPeak(std::vector<int> &arr, int index) {
        int n = arr.size();
        if (index < 0 || index >= n) return false; // Invalid index
        bool leftCheck = (index == 0 || arr[index - 1] < arr[index]);
        bool rightCheck = (index == n - 1 || arr[index + 1] < arr[index]);
        return leftCheck && rightCheck;
    
}
    
};
